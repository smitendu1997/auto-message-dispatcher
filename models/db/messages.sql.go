// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"
	"database/sql"
)

const getPendingMessage = `-- name: GetPendingMessage :many
SELECT id, recipient_phone, content, status, messageid, sent_at FROM messages WHERE status = 'pending' LIMIT 2
`

type GetPendingMessageRow struct {
	ID             int64
	RecipientPhone string
	Content        string
	Status         string
	Messageid      sql.NullString
	SentAt         sql.NullTime
}

func (q *Queries) GetPendingMessage(ctx context.Context) ([]GetPendingMessageRow, error) {
	rows, err := q.db.QueryContext(ctx, getPendingMessage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingMessageRow
	for rows.Next() {
		var i GetPendingMessageRow
		if err := rows.Scan(
			&i.ID,
			&i.RecipientPhone,
			&i.Content,
			&i.Status,
			&i.Messageid,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentMessages = `-- name: GetSentMessages :many
SELECT id, recipient_phone, content, status, messageid, sent_at, createdon FROM messages
WHERE status = 'sent'
ORDER BY sent_at DESC, id DESC
LIMIT ? OFFSET ?
`

type GetSentMessagesParams struct {
	Limit  int32
	Offset int32
}

type GetSentMessagesRow struct {
	ID             int64
	RecipientPhone string
	Content        string
	Status         string
	Messageid      sql.NullString
	SentAt         sql.NullTime
	Createdon      sql.NullTime
}

func (q *Queries) GetSentMessages(ctx context.Context, arg GetSentMessagesParams) ([]GetSentMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getSentMessages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSentMessagesRow
	for rows.Next() {
		var i GetSentMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.RecipientPhone,
			&i.Content,
			&i.Status,
			&i.Messageid,
			&i.SentAt,
			&i.Createdon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentMessagesCount = `-- name: GetSentMessagesCount :one
SELECT COUNT(*) as total FROM messages WHERE status = 'sent'
`

func (q *Queries) GetSentMessagesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSentMessagesCount)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const updateMessage = `-- name: UpdateMessage :exec
UPDATE messages 
SET 
    content = COALESCE(?, content),
    status = COALESCE(?, status),
    messageId = COALESCE(?, messageId),
    sent_at = COALESCE(?, sent_at)
WHERE id = ?
`

type UpdateMessageParams struct {
	Content   sql.NullString
	Status    sql.NullString
	MessageId sql.NullString
	SentAt    sql.NullTime
	ID        int64
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) error {
	_, err := q.db.ExecContext(ctx, updateMessage,
		arg.Content,
		arg.Status,
		arg.MessageId,
		arg.SentAt,
		arg.ID,
	)
	return err
}
